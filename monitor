class comp_decomp_monitor extends uvm_monitor;

  `uvm_component_utils(comp_decomp_monitor)

  virtual compression_decompression_if dut_if;

  uvm_analysis_port #(transaction) analysis_port;

  function new(string name, uvm_component parent);
    super.new(name, parent);
    analysis_port = new("analysis_port", this);
  endfunction

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if (!uvm_config_db #(virtual compression_decompression_if)::get(this, "", "dut_if", dut_if))
      `uvm_fatal("NOVIF", "Virtual interface not found")
  endfunction

  task run_phase(uvm_phase phase);
    forever begin
      transaction trans = transaction::type_id::create("trans");
      trans.compressed_out = dut_if.compressed_out;
      trans.decompressed_out = dut_if.decompressed_out;
      trans.response = dut_if.response;
      analysis_port.write(trans);
      #10;
    end
  endtask

endclass
